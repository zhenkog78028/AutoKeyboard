/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package KBInterface;
import java.awt.Robot;
import java.awt.AWTException;
//import java.time.Instant;
import java.util.Arrays;
//import java.time.Duration;
import java.util.List;
import java.awt.event.KeyEvent;
import javax.swing.*;
import java.io.*;
import javax.swing.text.*;
import java.text.NumberFormat;
//import java.awt.KeyboardFocusManager;
//import com.github.kwhat.jnativehook.keyboard.*;
/**
 *
 * @author zhenkog78028
 */
public class MainWindow extends javax.swing.JFrame {
    private boolean listening;
    private volatile boolean playing;
    private Thread KBPlayer;
    //private SpinnerListModel msValues;
    private final GlobalKeyListener gKL;
    //private KBKeyAdapter KBKA;
    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
         /*KeyboardFocusManager.getCurrentKeyboardFocusManager().addKeyEventDispatcher(event -> {
        if (event.getID() == KeyEvent.KEY_PRESSED && event.getKeyCode() == KeyEvent.VK_F7) {
            SwingUtilities.invokeLater(() -> record());
        } else if (event.getID() == KeyEvent.KEY_PRESSED && event.getKeyCode() == KeyEvent.VK_F8) {
            SwingUtilities.invokeLater(() -> play());
        }
        return false;
    });*/ // replaced by JNativeHook Keylistener which calls play&record methods

        listening = false;
        playing = false;
        //String[] ms = {"0","50","100","250","500","1000"};
        //int[] ms = {0,50,100,250,500,1000};
        //msValues = new SpinnerNumberModel(0,50,100,250,500,1000);
        gKL = new GlobalKeyListener(this);
        initComponents();
        configureSpinner();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        chooseFile = new javax.swing.JFileChooser();
        playButton = new javax.swing.JButton();
        recordButton = new javax.swing.JButton();
        listeningLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        saveButton = new javax.swing.JButton();
        loadButton = new javax.swing.JButton();
        delayLabel = new javax.swing.JLabel();
        delaySpinner = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        playButton.setBackground(new java.awt.Color(0, 255, 0));
        playButton.setText("Play back");
        playButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playButtonActionPerformed(evt);
            }
        });

        recordButton.setBackground(new java.awt.Color(255, 0, 0));
        recordButton.setText("Record Keys");
        recordButton.setMaximumSize(new java.awt.Dimension(80, 23));
        recordButton.setMinimumSize(new java.awt.Dimension(80, 23));
        recordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recordButtonActionPerformed(evt);
            }
        });

        listeningLabel.setText("Listening: ");

        jTextArea1.setColumns(20);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        loadButton.setText("Load");
        loadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadButtonActionPerformed(evt);
            }
        });

        delayLabel.setText("delay (ms):");

        delaySpinner.setModel(new javax.swing.SpinnerNumberModel(0, null, null, 1));

        jLabel1.setText("Recording hotkey: F7");

        jLabel2.setText("Playing hotkey: F8");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(saveButton)
                            .addComponent(loadButton)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(playButton, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(recordButton, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(delayLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(delaySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(listeningLabel))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(playButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(recordButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(delayLabel)
                    .addComponent(delaySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(listeningLabel)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(saveButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(loadButton))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void configureSpinner() {
    
    FlexibleSpinnerModel model = new FlexibleSpinnerModel();
    delaySpinner.setModel(model);

    
    NumberFormat format = NumberFormat.getIntegerInstance();
    format.setGroupingUsed(false); // no commas

    NumberFormatter formatter = new NumberFormatter(format);
    formatter.setValueClass(Integer.class);
    formatter.setAllowsInvalid(true); 
    formatter.setCommitsOnValidEdit(true);

    DefaultFormatterFactory factory = new DefaultFormatterFactory(formatter);

    // Create custom editor and attach it
    JSpinner.DefaultEditor editor = new JSpinner.DefaultEditor(delaySpinner);
    editor.getTextField().setFormatterFactory(factory);
    editor.getTextField().setEditable(true);
    delaySpinner.setEditor(editor);
}

    
    private void playButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playButtonActionPerformed
        play();
    }//GEN-LAST:event_playButtonActionPerformed
    public void play()
    {
        if(!playing)
        {
            playing = true;
            playButton.setBackground(new java.awt.Color(0, 0, 255));
            playButton.setForeground(java.awt.Color.ORANGE);
            playButton.setText("Stop");
            new SwingWorker<Void, Void>() { //probably weird
                @Override
                protected Void doInBackground() throws Exception {
                    Thread.sleep(250); // Safe, runs in background
                    return null;
                }

                @Override
                protected void done() {
                    getKeyEventsAndPlayBack(); // Back on EDT
                }
            }.execute();
        }
       else {
            if (KBPlayer != null && KBPlayer.isAlive()) {
                KBPlayer.interrupt(); // Make sure KBPlayer is thread-safe
            }
            playButton.setBackground(new java.awt.Color(0, 255, 0));
            playButton.setForeground(new java.awt.Color(0,0,0));
            playButton.setText("Play back");
            playing = false;
    }
    }
    private void recordButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recordButtonActionPerformed
    record();
    
// TODO add your handling code here:
    }//GEN-LAST:event_recordButtonActionPerformed

    public void record()
    {
        if(!listening)
        {
            listening = true;
            recordButton.setBackground(java.awt.Color.GRAY);
            recordButton.setForeground(new java.awt.Color(0,0,255));
            recordButton.setText("Stop recording");
            listeningLabel.setText("Listening: true");
            gKL.clearEvents();
            gKL.setListening(true);
        }
        else if(listening)
        {
            listening = false;
            recordButton.setBackground(new java.awt.Color(255, 0, 0));
            recordButton.setForeground(new java.awt.Color(0,0,0));
            recordButton.setText("Record keys");
            listeningLabel.setText("Listening: false");
            gKL.setListening(false);
        }
    }
    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
     int returnVal = chooseFile.showSaveDialog(this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                File file = chooseFile.getSelectedFile();
                saveKeyEvents(file);
                //This is where a real application would save the file.
                //log.append("Saving: " + file.getName() + "." + newline);
            } else {
                //log.append("Save command cancelled by user." + newline);
            }
            //log.setCaretPosition(log.getDocument().getLength());
    }//GEN-LAST:event_saveButtonActionPerformed

    private void loadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadButtonActionPerformed
        int returnVal = chooseFile.showOpenDialog(this);
 
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                File file = chooseFile.getSelectedFile();
                loadKeyEvents(file);
                //This is where a real application would open the file.
                //log.append("Opening: " + file.getName() + "." + newline);
            } else {
                //log.append("Open command cancelled by user." + newline);
            }
    }//GEN-LAST:event_loadButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        gKL.unregisterScreen();
        System.exit(0);        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    private void getKeyEventsAndPlayBack()
    {
        KBPlayer = new Thread(() -> {
            //NativeKeyEvent a;
            Robot robot = null;
            List<KeyEvent> events = gKL.getKeyEvents();

            if (events.isEmpty()) {
                //System.out.println("No events to replay.");
                return;
            }

            try {
                while(playing) //probably a bad practice
                {

                    robot = new Robot();
                    //SwingKeyAdapter ska = new SwingKeyAdapter();
                    //boolean shiftPressed = false;
                    for (int i = 0; i < events.size() - 1; i++) {
                        KeyEvent current = events.get(i);
                        KeyEvent next = events.get(i + 1);
                        long delay = next.getWhen() - current.getWhen();

                        int keyCode = current.getKeyCode();

                        if (current.getID() == KeyEvent.KEY_PRESSED) {
                            if (keyCode == KeyEvent.VK_SHIFT) {
                                //shiftPressed = true;
                                robot.keyPress(KeyEvent.VK_SHIFT);
                            } else {
                                robot.keyPress(keyCode);
                            }
                        } else if (current.getID() == KeyEvent.KEY_RELEASED) {
                            if (keyCode == KeyEvent.VK_SHIFT) {
                                //shiftPressed = false;
                                robot.keyRelease(KeyEvent.VK_SHIFT);
                            } else {
                                robot.keyRelease(keyCode);
                            }
                        }

                        Thread.sleep(delay);
                    }
                    /*

                    */

                    
                    KeyEvent last = events.get(events.size() - 1);
                    if (last.getID() == KeyEvent.KEY_PRESSED) {
                        robot.keyPress(last.getKeyCode());
                    } else if (last.getID() == KeyEvent.KEY_RELEASED) {
                        robot.keyRelease(last.getKeyCode());
                    }
                    Thread.sleep((Integer) delaySpinner.getValue());

                }

            } catch (AWTException | InterruptedException e) {
                Thread.currentThread().interrupt();
            } finally {
                //SwingUtilities.invokeLater(() -> playButton.setEnabled(true));
                if (robot != null) { //to be safe
                    robot.keyRelease(KeyEvent.VK_SHIFT);
                    robot.keyRelease(KeyEvent.VK_CONTROL);
                    robot.keyRelease(KeyEvent.VK_ALT);
                }
                playing = false;
                SwingUtilities.invokeLater(() -> {
                    playButton.setBackground(new java.awt.Color(0, 255, 0));
                    playButton.setForeground(new java.awt.Color(0,0,0));
                    playButton.setText("Play back");
                });
                //playing = false;
            }
        });
        KBPlayer.start();
    }
    
    private void saveKeyEvents(File file) //methods to get and set KeyEvents from a file
    {
        try {//https://stackoverflow.com/questions/3030642/write-java-objects-to-file
            FileOutputStream fout = new FileOutputStream(file.getAbsolutePath());
            try (ObjectOutputStream oos = new ObjectOutputStream(fout)) {
                oos.writeObject(gKL.getKeyEvents());
            }
        }
        catch (IOException e) {e.printStackTrace();}
    }
    private void loadKeyEvents(File file)
    {
        try {
            gKL.clearEvents();
            FileInputStream fin = new FileInputStream(file.getAbsolutePath());
            try (ObjectInputStream ois = new ObjectInputStream(fin)) {
                gKL.setKeyEvents((List<KeyEvent>) ois.readObject());
            }
        } catch (IOException | ClassNotFoundException e) {e.printStackTrace();}
        // TODO add your handling code here:
    }
    
    
    public class FlexibleSpinnerModel extends AbstractSpinnerModel {
        private final List<Integer> predefined = Arrays.asList(0, 50, 100, 250, 500, 1000);
        private int value = 100;

        @Override
        public Object getValue() {
            return value;
        }

        @Override
        public void setValue(Object newValue) {
            if (!(newValue instanceof Number)) {
                throw new IllegalArgumentException("Value must be a Number");
            }
            int intValue = ((Number) newValue).intValue();
            if (intValue != value) {
                value = intValue;
                fireStateChanged();
            }
        }

        @Override
        public Object getNextValue() {
            int base = getNearestValueIndex(value);
            if (base >= 0 && base < predefined.size() - 1) {
                return predefined.get(base + 1);
            }
            return null;
        }

        @Override
        public Object getPreviousValue() {
            int base = getNearestValueIndex(value);
            if (base > 0) {
                return predefined.get(base - 1);
            }
            return null;
        }

        private int getNearestValueIndex(int val) {
            // If value is in list, use exact match
            int idx = predefined.indexOf(val);
            if (idx >= 0) return idx;

            // Otherwise find closest value
            int closestIndex = 0;
            int closestDiff = Integer.MAX_VALUE;
            for (int i = 0; i < predefined.size(); i++) {
                int diff = Math.abs(predefined.get(i) - val);
                if (diff < closestDiff) {
                    closestDiff = diff;
                    closestIndex = i;
                }
            }
            return closestIndex;
        }

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFileChooser chooseFile;
    private javax.swing.JLabel delayLabel;
    private javax.swing.JSpinner delaySpinner;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JLabel listeningLabel;
    private javax.swing.JButton loadButton;
    private javax.swing.JButton playButton;
    private javax.swing.JButton recordButton;
    private javax.swing.JButton saveButton;
    // End of variables declaration//GEN-END:variables
}
